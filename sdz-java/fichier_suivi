====== Chapitre SDZ : Installer les outils de developpement ======
Classe correspondante au chapitre : sdz-java/Sdz1.java
==== Compiler en ligne de commande une classe ====
Definir la variable d'environnement JAVA_HOME = C:\Program Files\Java\jdk1.6.0_27
Se placer dans le rÃƒÂ©pertoire contenant la classe :
cd C:\Users\cavailled\Documents\Workspace\java_sdz\src\sdz
Lancer la commande :
javac Sdz1.java

====== Chapitre SDZ : Les variables et les operateurs ======
Classe correspondante au chapitre : sdz-java/VariablesOperateurs.java

====== Chapitre SDZ : Lire les entrÃ©es clavier ======
Classe correspondante au chapitre : sdz-java/LireClavier.java

====== Chapitre SDZ : Les conditions ======
Classe correspondante au chapitre : sdz-java/Conditions.java

====== Chapitre SDZ : Les boucles ======
Classe correspondante au chapitre : sdz-java/Boucles.java

====== Chapitre SDZ : TP conversion Celsius Fahrenheit ======
Classe correspondante au chapitre : sdz-java/TpCelsiusFahrenheit.java

====== Chapitre SDZ : Le tableaux ======
Classe correspondante au chapitre : sdz-java/Tableaux.java

====== Chapitre SDZ : Les mÃ©thodes ======
Classe correspondante au chapitre : sdz-java/Methodes.java

====== Chapitre SDZ : Votre premier classe ======
Classes correspondantes au chapitre : sdz-java/ClasseMain.java
                                      sdz-java/Ville.java
Voici les diffÃ©rents types de variables :
- Les variables d'instance : ce sont elles qui dÃ©finiront les caractÃ©ristiques de notre objet.
- Les variables de classe : celles-ci sont communes Ã  toutes les instances de votre classe.
- Les variables locales : ce sont des variables que nous utiliserons pour travailler dans notre objet.

MÃ©thode d'instance : MÃ©thode appelÃ©e Ã  la crÃ©ation d'un objet (Constructeurs et mÃ©thodes dÃ©pendantes)

====== Chapitre SDZ : L'héritage ======
Classes correspondantes au chapitre : 	sdz-java/Capitale.java
										sdz-java/Heritage.java
private : ne peut être vu que de la classe courante
protected : peut être vu de la classe courante et ses classes filles
public : peut être vu de toutes les classes

méthode polymorphe : elle peut être appelée de type d'objet dépendant (classe mère et classe fille)
classe object : toutes les classes héritent de cette classe

hashCode : méthode permettant d'attribuer un identifiant à un objet, elle lui donne un code de hashage
equals : méthode permettant de comparer des objects
hashCode / equals : peuvent être auto-généré via clic-droit sur la classe, puis "Source/Generate hashcode and equals"

final (public final void maMethode() {) : définit une méthode qui ne peut pas être redéfinie
